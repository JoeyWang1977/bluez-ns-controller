#include <assert.h>
#include <pthread.h>
#include "defs.h"
#include "links.h"
#include "session.h"
#include "input_report.h"
#include "output_report.h"

#define assert_session(session) assert(session && session->recv && session->send)

/*extern*/ struct Session
{
    Recv *recv;
    Send *send;
    InputReport_t *input;
    OutputReport_t *output;
    Device_t host;
    int polling;
    pthread_t poll_thread;
    pthread_mutex_t poll_mutex;
    pthread_rwlock_t input_lock;
    pthread_rwlock_t output_lock;
    TaskLink_t tasks;
};

Session_t *Session_create(Device_t *host, Recv *recv, Send *send)
{
    _FUNC_;
    Session_t *session;
    assert(host && recv && send);
    //assert(host->role == CONSOLE);
    session = (Session_t *)malloc(sizeof(Session_t));
    if (!session)
        goto done;
    bzero(session, sizeof(Session_t));
    session->recv = recv;
    session->send = send;
    memmove(&session->host, host, sizeof(Device_t));
    session->output = createOutputReport(NULL);
    if (!session->output)
        goto free;
    session->input = createInputReport(NULL);
    if (!session->input)
        goto free;
    if (0 != pthread_mutex_init(&session->poll_mutex, NULL))
        goto free;
    if (0 != pthread_rwlock_init(&session->input_lock, NULL))
        goto free;
    if (0 != pthread_rwlock_init(&session->output_lock, NULL))
        goto free;
    links_init(&session->tasks);
    return session;

free:
    Session_release(session);
done:
    perror("error when create session\n");
    return NULL;
}

void Session_release(Session_t *session)
{
    _FUNC_;
    if (session)
    {
        if (session->polling || session->poll_thread)
        {
            printf("polling, try to cancel it...\n");
            if (pthread_cancel(session->poll_thread) < 0)
            {
                perror("pthread_cancel\n");
                exit(-1);
            }
            pthread_join(session->poll_thread, NULL);
            pthread_mutex_destroy(&session->poll_mutex);
            pthread_rwlock_destroy(&session->input_lock);
            pthread_rwlock_destroy(&session->output_lock);
            session->poll_thread = 0;
            free(session->output);
            free(session->input);
            printf("release done\n");
        }
    }
    free(session);
}
